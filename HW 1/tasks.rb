puts "Serhii Lytvyn"

puts "1. Дан целочисленный массив. Найти индекс минимального элемента"
p arr = [102, 96, 56, 27, 33, 58, 45, 6, 31]
  p arr.index(arr.min)
puts "------------------------------------------------------------------"
puts "2. Дан целочисленный массив. Найти индекс максимального элемента"
p arr = [102, 96, 56, 27, 33, 58, 45, 6, 31]
  p arr.index(arr.max)
puts "------------------------------------------------------------------"
puts"3. Дан целочисленный массив. Найти количество элементов
 расположенных после последнего максимального"
p arr = [10, 96, 56, 27, 33, 96, 45, 6, 31]
  p arr.reverse.index(arr.max)
puts "------------------------------------------------------------------"
puts "4. Дан целочисленный массив. Найти количество элементов, 
#расположенных после последнего минимального"
p arr = [130, 3, 56, 27, 3, 58, 45, 6, 31]
  p arr.reverse.index(arr.min)
puts "------------------------------------------------------------------" 
puts "5. Дан целочисленный массив. Вывести вначале все его четные элементы, а затем - нечетные"
p arr = [127, 96, 56, 27, 3, 58, 45, 9, 32]
  p x = arr.find_all{ |elem| (elem % 2).zero? } + arr.find_all{ |elem| elem.odd? }
    p x 
puts "------------------------------------------------------------------"
puts "6. Дан целочисленный массив. Вывести вначале все его нечетные элементы, а затем - четные" 
p arr = [127, 96, 56, 27, 3, 58, 45, 9, 32]
  p x = arr.find_all{ |elem| (elem.odd?) } + arr.find_all{ |elem| (elem % 2).zero? }  
    p x
puts "------------------------------------------------------------------"
puts "7. Дан целочисленный массив. Осуществить циклический 
 сдвиг элементов массива влево на одну позицию"
p arr = [453, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.push(arr.shift) or arr.rotate(1)
puts "------------------------------------------------------------------"
puts "8. Дан целочисленный массив. Осуществить циклический 
 сдвиг элементов массива вправо на одну позицию"
p arr = [453, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.rotate(8)
puts "------------------------------------------------------------------"
puts "9. Дан целочисленный массив. Упорядочить его по возрастанию"
p arr = [453, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.sort
puts "------------------------------------------------------------------"
puts "10. Дан целочисленный массив. Упорядочить его по убыванию"
p arr = [453, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.sort.reverse 
puts "------------------------------------------------------------------"
puts "11. Дан целочисленный массив. Найти количество минимальных элементов"
p arr = [453, 8, 95, 27, 8, 113, 57, 9, 8]
  p arr.count(arr.min)
puts "------------------------------------------------------------------"
puts "12. Дан целочисленный массив. Найти количество максимальных элементов"
p arr = [453, 8, 453, 27, 8, 453, 57, 9, 8, 453, 48]
  p arr.count(arr.max)
puts "------------------------------------------------------------------"
puts "13. Дан целочисленный массив. Найти минимальный четный элемент"
p arr = [453, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr1 = arr.find_all{ |elem| (elem % 2).zero? }
    p arr1.min
puts "------------------------------------------------------------------"
puts "14. Дан целочисленный массив. Найти минимальный нечетный элемент"
p arr = [453, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr2 = arr.find_all{ |elem| elem.odd? }
    p arr2.min
puts "------------------------------------------------------------------"
puts "15. Дан целочисленный массив. Найти максимальный четный элемент"
p arr = [453, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr1 = arr.find_all{ |elem| (elem % 2).zero? }
    p arr1.max
puts "------------------------------------------------------------------"
puts "16. Дан целочисленный массив. Найти максимальный нечетный элемент"
p arr = [453, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr2 = arr.find_all{ |elem| elem.odd? }
    p arr2.max 
puts "------------------------------------------------------------------"
puts "17. Дан целочисленный массив. Найти минимальный положительный элемент"
p arr = [453, -96, 95, -27, 8, -113, 57, -9, 32]
  p arr1 = arr.find_all{ |elem| elem > 0 }
    p arr1.min 
puts "------------------------------------------------------------------"
puts "18. Дан целочисленный массив. Найти максимальный отрицательный элемент"	
p arr = [453, -96, 95, -27, 8, -113, 57, -9, 32]
  p arr2 = arr.find_all{ |elem| elem < 0 }
    p arr2.max 
puts "------------------------------------------------------------------"
puts "19. Дан целочисленный массив. Найти два наибольших элемента"		
p arr = [153, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.max 
    p arr.delete(arr.max)
      p arr.max
puts "------------------------------------------------------------------"
puts "20. Дан целочисленный массив. Найти два наименьших элемента"		
p arr = [153, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.min
    p arr.delete(arr.min)
      p arr.min
puts "------------------------------------------------------------------"
puts "21. Дан целочисленный массив. Найти все четные элементы"
p arr = [153, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.find_all{ |elem| (elem % 2).zero? }
puts "------------------------------------------------------------------"
puts "22. Дан целочисленный массив. Найти количество четных элементов"
p arr = [153, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.find_all{ |elem| (elem % 2).zero? }.size
puts "------------------------------------------------------------------"
puts "23. Дан целочисленный массив. Найти все нечетные элементы"
p arr = [153, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.find_all{ |elem| elem.odd? }
puts "------------------------------------------------------------------"
puts "24. Дан целочисленный массив. Найти количество нечетных элементов"
p arr = [153, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.find_all{ |elem| elem.odd? }.size 
puts "------------------------------------------------------------------"
puts "25. Дан целочисленный массив. Найти среднее арифметическое его элементов"
p arr = [153, 96, 95, 27, 8, 113, 57, 9, 32]
  p arr.inject{ |sum, elem| sum + elem }.to_f / arr.size
puts "------------------------------------------------------------------"
puts "26. Дан дипапазон a..b. Получить массив из чисел, расположенных в этом
 диапазоне (исключая сами эти числа), в порядке их возрастания, а также размер этого массивa"
p arr = [1..-2]
  p arr.sort
    p arr.size
puts "------------------------------------------------------------------"
puts "27. Дан дипапазон a..b. Получить массив из чисел, расположенных в этом
 диапазоне (исключая сами эти числа), в порядке их убывания, а также размер этого массивa"
p arr = [1..-2]
  p arr.sort.reverse
    p arr.size
puts "------------------------------------------------------------------"
puts "28. Дан целочисленный массив. Найти среднее арифметическое квадратов его элементов"
p arr = [3, 6, 5, 2, 8, 13, 5, 9, 16]
  p arr1 = arr.map{ |elem| elem ** 2 }
    p arr1.inject{ |sum, elem| sum + elem }.to_f / arr1.size
puts "------------------------------------------------------------------"
puts "29. Дан целочисленный массив. Найти индекс первого минимального элемента"
p arr = [127, 96, 56, 27, 3, 58, 45, 127, 3, 32]
  p arr.index(arr.min) 
puts "------------------------------------------------------------------"
puts "30. Дан целочисленный массив. Найти индекс первого максимального элемента"
p arr = [127, 96, 56, 27, 3, 58, 45, 127, 3, 32]
  p arr.index(arr.max) 
puts "------------------------------------------------------------------"
puts "31. Дан целочисленный массив. Найти индекс последнего минимального элемента"
p arr = [127, 96, 56, 27, 3, 58, 45, 127, 3, 32]
  p arr.rindex(arr.min) #=> 8
puts "------------------------------------------------------------------"
puts "32. Дан целочисленный массив. Найти индекс последнего максимального элемента"
p arr = [127, 96, 56, 27, 3, 58, 45, 127, 3, 32]
  p arr.rindex(arr.max) 
puts "------------------------------------------------------------------"
puts "33. Дан целочисленный массив. Необходимо вывести вначале его 
 элементы с четными индексами, а затем - с нечетными"	
p arr = [127, 96, 56, 27, 3, 58, 45, 127, 3, 32]
  p arr.select.each_with_index{ |_,index| index.even? } + arr.select.each_with_index{ |_,index| index.odd? }
puts "------------------------------------------------------------------"
puts "34. Дан целочисленный массив. Необходимо вывести вначале его 
 элементы с нечетными индексами, а затем - с четными"	
p arr = [127, 96, 56, 27, 3, 58, 45, 127, 3, 32]
  p arr.select.each_with_index{ |_,index| index.odd? } + arr.select.each_with_index{ |_,index| index.even? }
puts "------------------------------------------------------------------"
puts "35. Дан целочисленный массив. Вывести номер первого из тех его элементов, 
 которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ]"
p arr = [127, 96, 56, 27, 3, 58, 45, 127, 3, 32]
  p arr.index {|index| arr[0] < index && index < arr[-1]} || []
puts "------------------------------------------------------------------"
puts "36. Дан целочисленный массив. Заменить все положительные элементы на значение минимального"
p arr = [453, -96, 95, -27, 8, -113, 57, -9, 32]
  p min = arr.min
    p arr.map! {|x| x>0? min: x}
puts "------------------------------------------------------------------"
puts "37. Дан целочисленный массив. Заменить все положительные элементы на значение максимального"
p arr = [453, -96, 95, -27, 8, -113, 57, -9, 32]
  p max = arr.max
      p arr.map! {|x| x>0? max: x}
puts "------------------------------------------------------------------"
puts "38. Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального"
p arr = [453, -96, 95, -27, 8, -113, 57, -9, 32]
  p min = arr.min
    p arr.map! {|x| x<0? min: x}
puts "------------------------------------------------------------------"
puts "39. Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального"	
p arr = [453, -96, 95, -27, 8, -113, 57, -9, 32]
  p max = arr.max
    p arr.map! {|x| x<0? max: x}	
puts "------------------------------------------------------------------"
puts "40. Дан целочисленный массив. Найти количество его локальных максимумов"			
p arr = [127, 96, 56, 27, 3, 58, 45, 127, 3, 32]
  p (1...arr.size-1).select{ |x| (arr[x] > arr[x-1]) && (arr[x] > arr[x+1]) }.size
puts "------------------------------------------------------------------"
puts "41. Дан целочисленный массив. Удалить все элементы, встречающиеся ровно два раза"
p arr = [127, 96, 56, 27, 3, 58, 45, 127, 3, 32]
  p skip_elements = arr.uniq.select do |value|
    p arr.count(value) == 2
end
  p skip_elements.each do |value|
    p arr.delete(value)
end
p arr
puts "------------------------------------------------------------------"
puts "42. Дан целочисленный массив. Удалить все элементы, встречающиеся ровно три раза"
p arr = [127, 96, 127, 27, 3, 58, 45, 127, 3, 32, 3]
  p skip_elements = arr.uniq.select do |value|
    p arr.count(value) == 3
end
  p skip_elements.each do |value|
    p arr.delete(value)
end
p arr
puts "------------------------------------------------------------------"
puts "43. Дан целочисленный массив. Найти среднее арифметическое модулей его элементов"
p arr = [453, -96, 95, -27, 8, -113, 57, -9, 32]
  p (arr.inject(0){ |sum, index| sum + index.abs}.to_f)/arr.size
puts "------------------------------------------------------------------"
puts "44. Дан целочисленный массив. Найти индекс первого экстремального (то есть минимального или максимального) элемента."	
p arr = [19, 76, 106, 13, 33, 106, 45, 13, 31]
  p min_in = arr.index(arr.min)
  p max_in = arr.index(arr.max)
    p extr_in = min_in < max_in ? min_in : max_in
      p extr_in
puts "------------------------------------------------------------------"
puts "45. Дан целочисленный массив. Найти индекс последнего экстремального (то есть минимального или максимального) элемента. "
p arr = [19, 76, 106, 13, 33, 106, 45, 13, 31]
  p min_in = arr.index(arr.min)
  p max_in = arr.index(arr.max)
    p extr_in = min_in > max_in ? min_in : max_in
      p extr_in
puts "------------------------------------------------------------------"
puts "46. Дан целочисленный массив. Найти количество элементов, расположенных перед первым минимальным"	
p arr = [19, 76, 106, 13, 33, 106, 45, 13, 31]
  p arr.index(arr.min)							
puts "------------------------------------------------------------------"																
puts "47. Дан целочисленный массив. Найти количество элементов, расположенных перед первым максимальным"
p arr = [10, 76, 106, 27, 33, 106, 45, 6, 31]
  p arr.index(arr.max)
puts "------------------------------------------------------------------"
puts "48. Дан целочисленный массив. Найти количество элементов, расположенных после первого максимального"
p arr = [10, 76, 106, 27, 33, 106, 45, 6, 31]
  p arr.reverse.rindex(arr.max)		
puts "------------------------------------------------------------------"																						
puts "49. Дан целочисленный массив. Найти количество элементов, расположенных после первого минимального"
p arr = [10, 66, 106, 27, 6, 106, 45, 6, 31]
  p arr.reverse.rindex(arr.min)	
puts "------------------------------------------------------------------"																								
puts "50. Дан целочисленный массив. Найти количество элементов, расположенных перед последним максимальным"
p arr = [10, 76, 106, 27, 33, 106, 45, 6, 31]
  p arr.rindex(arr.max)	
puts "------------------------------------------------------------------"																						
puts "51. Дан целочисленный массив. Найти количество элементов, расположенных перед последним минимальным"
p arr = [10, 76, 6, 27, 33, 106, 45, 6, 31]
  p arr.rindex(arr.min)	
puts "------------------------------------------------------------------"
puts "52. Дан целочисленный массив. Удалить все элементы, встречающиеся менее двух раз"
p arr = [127, 96, 127, 27, 32, 58, 45, 127, 3, 32, 3]
  p skip_elements = arr.uniq.select do |value|
    p arr.count(value) < 2
end
  p skip_elements.each do |value|
    p arr.delete(value)
end
p arr
puts "------------------------------------------------------------------"
puts "53. Дан целочисленный массив. Удалить все элементы, встречающиеся более двух раз"
p arr = [127, 96, 127, 27, 32, 32, 45, 127, 3, 32, 3]
  p skip_elements = arr.uniq.select do |value|
    p arr.count(value) > 2
end
  p skip_elements.each do |value|
    p arr.delete(value)
end
p arr
puts "------------------------------------------------------------------"